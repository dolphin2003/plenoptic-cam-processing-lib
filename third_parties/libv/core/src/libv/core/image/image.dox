/**

\addtogroup image Image Types

Read the <a href="#details">detailed description</a> before anything else.

\section typedefs Naming scheme

Images have many facets, so referring them in a precise yet concise manner is quite challenging.
For now we chose to use a BLAS-like code with the 5 informations presented in the table below.

For examples, see the <a href="#typedef-members">typedefs</a>.

<table>
<tr><th colspan=2> Number of planes
<tr><th><td><em> Omit this field if the image has 1 plane or a layout. </em>
<tr><th> V3 <td> The image has 3 planes.
<tr><th> V <td> The image has a variable number of planes. This might prove useful when working with histograms.
<tr><td colspan=2>
<tr><th colspan=2> Layout
<tr><th><td><em> Omit this field if the image has no particular layout. </em>
<tr><th> RGB <td> The image has 3 planes and the pixel type provides \c r(), \c g() and \c b() accessors.
<tr><th> XY <td> The image has 2 planes and the pixel type provides \c x() and \c y() accessors.
<tr><th> … <td>
<tr><td colspan=2>
<tr><th colspan=2> Scalar type
<tr><th> U8 <td> The scalar type is \c uint8_t.
<tr><th> I16 <td> The scalar type is \c int16_t.
<tr><th> F32 <td> The scalar type is \c float.
<tr><th> F64 <td> The scalar type is \c double.
<tr><th> … <td>
<tr><td colspan=2>
<tr><th colspan=2> Constness
<tr><th> c <td> The image contains constant data. Obviously this does not apply to images with value semantic, because their contents could not even be initialized.
<tr><th><td> The image contains mutable data.
<tr><td colspan=2>
<tr><th colspan=2> Semantic
<tr><th><td> The image has v::core::IMAGE_SEMANTIC_VALUE "value semantic". Use this to store your own images.
<tr><th> p <td> The image has v::core::IMAGE_SEMANTIC_POINTER "pointer semantic". Use this to interpret an image provided by another library as a Libv image.
<tr><th> r <td> The image has v::core::IMAGE_SEMANTIC_REFERENCE "reference semantic". Use this in function parameters.
</table>

\section tech Comment ça marche ?

Une image est un tableau tridimensionnel.
Pour le décrire on a donc besoin de son nombre de lignes, de colonnes et de plans.
De plus, le contenu d'une image n'est pas forcément contigu.
Pour aligner chaque début de ligne sur un multiple de 16 octets, ou pour mapper une zone de la mémoire gérée par une autre bibliothèque, on a besoin de laisser de l'espace vide entre deux lignes consécutives.
Il faut donc ajouter aux 3 nombres cités plus haut la distance entre deux lignes consécutives.
Les lignes semblent être toujours contiguës, donc nous ne nous occuperons pas pour l'instant de la distance entre deux colonnes consécutives ou deux scalaires consécutifs.

Ces dimensions peuvent être connues à l'avance (on manipule souvent des images à 1, 3 ou 4 plans) ou découvertes au moment de l'exécution du programme (nombre de lignes et colonnes d'une image lue dans un fichier).
Par souci de minimalisme autant que d'optimisation du code, nous préférerions stocker en tant que paramètres template ceux qui sont connus au moment de la compil